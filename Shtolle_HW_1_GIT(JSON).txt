 4. Создать внешний репозиторий c названием JSON.
создаем репозиторий на сайте GitHub
Repositories - New - add "name" - public - Add a README file - Create repository
 5. Клонировать репозиторий JSON на локальный компьютер.
Repositories - JSON - Code - Copy Link (url)
заходим в терминал и вводим: git clone "link"
 6. Внутри локального JSON создать файл “new.json”.
cat > new.json
 7. Добавить файл под гит.
git add .
 8. Закоммитить файл.
git commit -m "My first json file"
 9. Отправить файл на внешний GitHub репозиторий.
git push
 10. Отредактировать содержание файла “new.json” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате JSON.
vim new.json
{
...
}
 11. Отправить изменения на внешний репозиторий.
git commit -am "Added full name, etc"
git push
 12. Создать файл preferences.json
touch preferences.json
 13. В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате JSON.
vim preferences.json
{
...
}
 14. Создать файл sklls.json добавить информацию о скиллах которые будут изучены на курсе в формате JSON
touch skills.json
vim skills.json
{
...
}
 15. Отправить сразу 2 файла на внешний репозиторий.
git status
git add .
git commit -m "Add two files"
 16. На веб интерфейсе создать файл bug_report.json.
На сайте GitHub заходим в наш репозиторий - Add file - Create new file - JSON\add "name" 
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
Commit new file
 18. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON.
Возвращаемся на репозиторий JSON, жмём на bug_report.json - Edit this file - добавляем баг репорт
 19. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
Commit changes
 20. Синхронизировать внешний и локальный репозиторий JSON
git pull
